CMAKE_MINIMUM_REQUIRED(VERSION 3.7)

PROJECT("com.github.brimworks-lua-zlib")

INCLUDE(ExternalProject)


SET(VERSION_EXTERNAL "0.4")
SET(VERSION_PACKAGE  "1")
SET(PROJECT_VERSION  "${VERSION_EXTERNAL}.${VERSION_PACKAGE}")

# Get the VCS version for the jonchki configuration.
INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/version.cmake)

# Filter the jonchki configuration.
CONFIGURE_FILE(installer/lua5.1/lua-zlib.xml
               ${CMAKE_CURRENT_BINARY_DIR}/lua5.1-lua-zlib-${PROJECT_VERSION}.xml
               @ONLY)
CONFIGURE_FILE(installer/lua5.2/lua-zlib.xml
               ${CMAKE_CURRENT_BINARY_DIR}/lua5.2-lua-zlib-${PROJECT_VERSION}.xml
               @ONLY)
CONFIGURE_FILE(installer/lua5.3/lua-zlib.xml
               ${CMAKE_CURRENT_BINARY_DIR}/lua5.3-lua-zlib-${PROJECT_VERSION}.xml
               @ONLY)

OPTION(BUILDCFG_ONLY_JONCHKI_CFG "Build only the jonchki configuration. This is used for the resolve phase. The default is OFF."
       "OFF")

IF((${BUILDCFG_ONLY_JONCHKI_CFG} STREQUAL "OFF"))
	LIST(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR}/build_requirements/jonchki/install/dev/cmake)
	MESSAGE("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

	# Select the LUA version.
	INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/muhkuh_lua.cmake)
	MESSAGE("1 LUA_INCLUDE_DIR = ${LUA_INCLUDE_DIR}")
	MESSAGE("1 LUA_LIBRARIES = ${LUA_LIBRARIES}")


	FIND_PACKAGE("net.zlib-zlib" REQUIRED)
	GET_TARGET_PROPERTY(ZLIB_LIBRARY net.zlib-zlib::zlibstatic LOCATION)
	GET_TARGET_PROPERTY(ZLIB_INCLUDE_DIR net.zlib-zlib::zlibstatic INTERFACE_INCLUDE_DIRECTORIES)

	MESSAGE("2 LUA_INCLUDE_DIR = ${LUA_INCLUDE_DIR}")
	MESSAGE("2 LUA_LIBRARIES = ${LUA_LIBRARIES}")

	# Build the project.
	SET(SUB_CMAKE_ARGS "")
	LIST(APPEND SUB_CMAKE_ARGS "-DUSE_LUA=ON")
	LIST(APPEND SUB_CMAKE_ARGS "-DUSE_LUAJIT=OFF")
	LIST(APPEND SUB_CMAKE_ARGS "-DZLIB_LIBRARY=${ZLIB_LIBRARY}")
	LIST(APPEND SUB_CMAKE_ARGS "-DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIR}")
	LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
	LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}")
	LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
	LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
	LIST(APPEND SUB_CMAKE_ARGS "-DLUA_INCLUDE_DIR=${LUA_INCLUDE_DIR}")
	LIST(APPEND SUB_CMAKE_ARGS "-DLUA_LIBRARIES=${LUA_LIBRARIES}")
	LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/install")
	IF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		LIST(APPEND SUB_CMAKE_ARGS "-DCMAKE_RC_COMPILER=${CMAKE_RC_COMPILER}")
	ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")

	ExternalProject_Add(TARGET_lua_zlib
	                    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/lua-zlib-${VERSION_EXTERNAL}
	                    URL ${CMAKE_CURRENT_SOURCE_DIR}/lua-zlib-${VERSION_EXTERNAL}.tar.gz
	                    URL_HASH SHA1=a961b4130480cc552f3f76bdd4c5052ca7202305
	                    PATCH_COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/copy_over ${CMAKE_CURRENT_BINARY_DIR}/lua-zlib-${VERSION_EXTERNAL}/src/TARGET_lua_zlib
	                    CMAKE_ARGS ${SUB_CMAKE_ARGS}
	                    INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install
	)

	# Write a version file.
	FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/install/com.github.brimworks-lua-zlib.version "SET(com.github.brimworks-lua-zlib_VERSION ${VERSION_EXTERNAL}.${VERSION_PACKAGE})")
ENDIF((${BUILDCFG_ONLY_JONCHKI_CFG} STREQUAL "OFF"))
